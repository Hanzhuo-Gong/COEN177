Hanzhuo Gong

this week lab is to use FTP to change the process queue.

Procedure:
1. open the vmware and login with root and the password
2. type tcpd ftp /usr/bin/in.ftpd &
3. type ifconfig to get the ip address
4. open a terminal and type ftp <the ip address from ifconfig>
5. after the terminal show "Name....", enter root and the password
6. you will login in as ftp, and terminal shows ftp>
7. type cd /usr/src/
8. type get proc.c
9. open another terminal, type vim proc.c
10. motify the code in proc.c and save the code
11. get back to the ftp> terminal, type put proc.c
12. switch back to vmware, type cd /usr/src
13. type make world
14. type reboot
15. observe the time different after the code change, it will take longer.

The code I changed in pick_proc function:

PRIVATE struct proc * pick_proc(void)
{
/* Decide who to run now.  A new process is selected an returned.
 * When a billable process is selected, record it in 'bill_ptr', so that the 
 * clock task can tell who to bill for system time.
 */
  register struct proc *rp;                     /* process to run */
  int q;                                /* iterate over queues */

  /* Check each of the scheduling queues for ready processes. The number of
   * queues is defined in proc.h, and priorities are set in the task table.
   * The lowest queue contains IDLE, which is always ready.
   */
for (q=0; q < NR_SCHED_QUEUES; q++) {

        int randomNumber = rand()%100;
        if (randomNumber <= 10) {
                q = rand()%NR_SCHED_QUEUES;
        }
        else {
                q = 0;
        }

        if(!(rp = rdy_head[q])) {
                TRACE(VF_PICKPROC, printf("queue %d empty\n", q););
                continue;
        }

#if DEBUG_RACE
        rp = random_process(rdy_head[q]);
#endif

TRACE(VF_PICKPROC, printf("found %s / %d on queue %d\n",
                rp->p_name, rp->p_endpoint, q););
        assert(proc_is_runnable(rp));
        if (priv(rp)->s_flags & BILLABLE)
                bill_ptr = rp;          /* bill for system time */
        return rp;
  }
  return NULL;
}

Observation:
After the code change, the reboot take around 1 extra min to start up. The system will boot up around 1 min 23 seconds without the code, around 2-3 mins with the code. I set the probably that to 10, so anything greater than the 10 will reset the prority of the queue, so the reboot will take longer.

